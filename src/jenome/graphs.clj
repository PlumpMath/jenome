(ns jenome.graphs
  (:import [org.jfree.data.xy XYSeriesCollection XYSeries]
           [org.jfree.chart ChartFrame JFreeChart]
           [org.jfree.chart.plot XYPlot]
           [org.jfree.chart.axis NumberAxis]
           [org.jfree.chart.renderer.xy XYBarRenderer StandardXYBarPainter]
           [org.jfree.chart.renderer.category]))


(defn get-lengths
  "
  Convert any seq to a sequence of integers representing number of
  duplicates in the original seq. 
  "
  [s]
  (->> s
       (partition-by identity)
       (remove #(= (first %) :N))
       (map count)))


(defn trim-zeros 
  "
  Convert zeros (or negatives) to small positive values to allow for
  graphing on log scale
  "
  [vals]
  (map (fn [[x y]] [x (if (> y 0) y 0.0001)]) vals))


(defn make-hist
  "
  Convert seq of input xs into a histogram of nbins bins, from xmin to
  xmax.  Discard overflows or underflows
  "
  [xmin xmax nbins xs]
  (let [;; "base" histogram (zeros):
        zero-map (into (sorted-map)
                       (map (fn [x] [x 0]) (range nbins)))
        ;; actual bin values for every input in xs:
        xbins (map #(int (* nbins (/ (- % xmin)
                                     (- xmax xmin))))
                   xs)
        ;; strip out undeflows & overflows:
        no-overflows (->> xbins
                          (remove #(< % 0))
                          (remove #(>= % nbins)))]
    ;; yield histogram as array of [ibin, height] pairs:
    (into [] (reduce #(update-in %1 [%2] inc) zero-map no-overflows))))


(defn draw-hist
  "
  Draw histogram of bins as generated by make-hist
  "
  [x-label values]
  (let [renderer (XYBarRenderer.)
        painter (StandardXYBarPainter.)
        series (XYSeries. [])
        blue (java.awt.Color. 0x3b 0x6c 0x9d)
        coll (XYSeriesCollection. series)
        y-axis (org.jfree.chart.axis.LogarithmicAxis. "Entries")
        plot (XYPlot. coll (NumberAxis. x-label) y-axis renderer)
        panel (JFreeChart. plot)
        frame (ChartFrame. "Histogram" panel)]
    (doto plot
      (.setBackgroundAlpha 0.0)
      (.setRangeGridlinesVisible false)
      (.setDomainGridlinesVisible false))
    (doto renderer
      (.setBarPainter painter)
      (.setPaint blue)
      (.setDrawBarOutline true)
      (.setOutlinePaint blue)
      (.setOutlineStroke (java.awt.BasicStroke. 1))
      (.setShadowVisible false))
    (doseq [[x y] values]
      (.add series (+ x 0.5) y))
    (.setLowerBound y-axis 0.5)
    (.setVisible (.getLegend panel) false)
    (doto frame
      (.setSize 800 250)
      (.setVisible true))))


;; (defn randgenome
;;     "
;;     For testing, in case we need a random 'null-hypothesis' genome:
;;     "
;;     []
;;     (repeatedly #(rand-nth [:A :G :C :T])))


;; (draw-hist (trim-zeros (make-hist 0.5 12.5 12 (get-lengths (take 200000 (randgenome)))))
;;            "Lengths")

;; OLD-------------------------------------------------------------------------
;; (ns jenome.graphs
;;   (:require [incanter.core :refer :all]
;;             [incanter.stats :refer :all]
;;             [incanter.charts :refer :all]))


;; (defn dohist [hist]
;;   (let [plot (.getPlot hist)
;;         rend (.getRenderer plot)
;;         blue (java.awt.Color. 0x3b 0x6c 0x9d)]
;; ;;    (set-axis hist :y (log-axis))
;;     (.setOutlinePaint rend blue)
;;     (.setOutlineStroke rend (java.awt.BasicStroke. 2))
;;     (-> hist
;;         clear-background
;;         (set-axis :y (log-axis))
;;         view)))

;; (show-chart (histogram (sample-normal 100000) :density true))

;; (defn hist-values [values]
;;   (let [mx (apply max values)
;;         mn (apply min values)
;;         _ (println mx mn)
;;         values (map (partial + -0.5) values)
;;         hist (histogram values :nbins (inc (- mx mn)))
;;         rend (.getRenderer (.getPlot hist))
;;         blue (java.awt.Color. 0x3b 0x6c 0x9d)
;;         axis (org.jfree.chart.axis.LogarithmicAxis. "")
;;         basedata (-> hist .getXYPlot .getDataset)
;;         maxbin (apply max (for [i (range mn mx)] (.getY basedata 0 i)))]
;;     (.setLowerBound axis 0.5)
;;     (.setUpperBound axis (inc maxbin))
;;     (set-axis hist :y axis)
;;     (.setOutlinePaint rend blue)
;;     (.setPaint rend blue)
;;     (.setOutlineStroke rend (java.awt.BasicStroke. 2))
;;     (-> hist
;;         clear-background
;;         view)))


;; (defmacro histogram1
;;   ([x & options]
;;     `(let [opts# ~(if options (apply assoc {} options) {})
;;            title# (or (:title opts#) "")
;;            x-lab# (or (:x-label opts#) (str '~x))
;;            series-lab# (or (:series-label opts#) (str '~x))
;;            args# (concat [~x] (apply concat (seq (apply assoc opts#
;;                                                         [:title title#
;;                                                          :x-label x-lab#
;;                                                          :series-label series-lab#]))))]
;;         (apply histogram1* args#))))


;; (defn- data-as-list [x data]
;;   "data-as-list [x data]

;;     If x is a collection, return it
;;     If x is a single value, and data is undefined, return x in vector
;;     If x is a single value, and data is defined, return ($ x data)"
;;   (if (coll? x)
;;     (to-list x)
;;     (if data
;;       (let [selected ($ x data)]
;;         (if (coll? selected)
;;           selected
;;           [selected]))
;;       [x])))


;; (defn histogram1*
;;   ([x & options]
;;     (let [opts (if options (apply assoc {} options) {})
;;           data (or (:data opts) $data)
;;           _x (data-as-list x data)
;;           nbins (or (:nbins opts) 10)
;;           theme (or (:theme opts) :default)
;;           density? (true? (:density opts))
;;           title (or (:title opts) "")
;;           x-lab (or (:x-label opts) (str 'x))
;;           y-lab (or (:y-label opts)
;;                      (if density? "Density" "Frequency"))
;;           series-lab (or (:series-label opts) (str 'x))
;;           legend? (true? (:legend opts))
;;           dataset (org.jfree.data.statistics.HistogramDataset.)]
;;       (do
;;         (doseq [subseq (partition-all 10000 _x)]
;;           (.addSeries dataset series-lab (double-array subseq) nbins))
;;         ;; (.addSeries dataset series-lab (double-array _x) nbins)
;;         (when density? (.setType dataset org.jfree.data.statistics.HistogramType/SCALE_AREA_TO_1))
;;         (let [chart (-> (org.jfree.chart.ChartFactory/createHistogram
;;                           title
;;                           x-lab
;;                           y-lab
;;                           dataset
;;                           org.jfree.chart.plot.PlotOrientation/VERTICAL
;;                           legend?                ; no legend
;;                           true                        ; tooltips
;;                           false)
;;                         (set-theme theme))]
;;           chart)))))

;; THIS OOMS:
;; (let [data (repeat 2000000 (rand-int 10))]
;;   (histogramm data :nbins 10 :x-label "" :series-label ""))

;; (let [values [1 2 1 2 3 1 2 4 6]
;;       hist (histogram values :nbins 6)]
;;   (set-axis hist :y (log-axis))
;;   (view hist))


;; (let [values [1 2 1 2 3 1 2 4 6]
;;       nbins 6
;;       hist (histogram values :nbins nbins)
;;       axis (org.jfree.chart.axis.LogarithmicAxis. "")
;;       basedata (-> hist .getXYPlot .getDataset)
;;       values (for [i (range nbins)] (.getY basedata 0 i))
;;       maxvalue (apply max values)]
;;   (.setLowerBound axis 0.5)
;;   (.setUpperBound axis (inc maxvalue))
;;   (set-axis hist :y axis)
;;   (view hist))


;; (hist-values (->> (randgenome)
;;                   (take 1000000)
;;                   (partition-by identity)
;;                   (map count)))

